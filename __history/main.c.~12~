#include <16F877A.h>
#device ADC=16

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES NOBROWNOUT               //No brownout reset
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O

#use delay(crystal=4000000)
#use i2c(Master, Fast=100000, sda=PIN_C4, scl=PIN_C3, force_sw)  
#include "i2c_Flex_LCD.c"

// Definições dos pinos
#define IR_PIN      PIN_B0      // Pino do receptor IR
#define RELE1_PIN   PIN_C0      // Pino do relé 1
#define RELE2_PIN   PIN_C1      // Pino do relé 2

// Variáveis globais
unsigned int16 ir_code[2];      // Array para armazenar o código IR (32 bits divididos em 2x16 bits)
int1 ir_flag = 0;              // Flag para indicar recebimento de código

// Função para ler o código IR
void read_ir_code() {
   int8 i;
   
   ir_code[0] = 0;
   ir_code[1] = 0;
   
   // Espera pelo start bit
   while(input(IR_PIN) == 0);
   delay_ms(9);
   
   // Lê os primeiros 16 bits
   for(i = 0; i < 16; i++) {
      while(input(IR_PIN) == 1);  // Espera bit começar
      delay_us(500);
      
      if(input(IR_PIN) == 1) {    // Se ainda estiver em 1, é bit 1
         bit_set(ir_code[0], i);
         delay_us(1000);
      }
      else {                      // Senão, é bit 0
         delay_us(400);
      }
      
      while(input(IR_PIN) == 0);  // Espera bit terminar
   }
   
   // Lê os últimos 16 bits
   for(i = 0; i < 16; i++) {
      while(input(IR_PIN) == 1);  // Espera bit começar
      delay_us(500);
      
      if(input(IR_PIN) == 1) {    // Se ainda estiver em 1, é bit 1
         bit_set(ir_code[1], i);
         delay_us(1000);
      }
      else {                      // Senão, é bit 0
         delay_us(400);
      }
      
      while(input(IR_PIN) == 0);  // Espera bit terminar
   }
}

void main() {
   // Inicialização do LCD
   lcd_init(0x4E, 16, 2);
   lcd_backlight_led(ON);
   
   // Configuração dos pinos
   set_tris_b(0b00000001);  // RB0 como entrada (IR)
   set_tris_c(0b11111100);  // RC0 e RC1 como saída (Relés)
   
   // Inicialização das portas
   output_c(0x00);          // Todos os pinos de PORTC em nível baixo
   
   // Mensagem inicial
   printf(lcd_putc, "\f Remote Test");
   delay_ms(1000);
   printf(lcd_putc, "\nAguardando...");
   
   while(TRUE) {
      // Aguarda sinal do receptor IR
      if(input(IR_PIN) == 0) {
         read_ir_code();
         ir_flag = 1;
      }
      
      // Se recebeu um código IR
      if(ir_flag) {
         // Mostra o código no LCD
         printf(lcd_putc, "\f Codigo: %04LX", ir_code[0]);
         printf(lcd_putc, "\n %04LX", ir_code[1]);
         
         // Verifica qual botão foi pressionado
         if(ir_code[0] == 0x30CF) {  // Exemplo: botão "1"
            output_toggle(RELE1_PIN);
         }
         else if(ir_code[0] == 0x18E7) {  // Exemplo: botão "2"
            output_toggle(RELE2_PIN);
         }
         
         ir_flag = 0;       // Limpa a flag
         delay_ms(200);     // Debounce
      }
   }
}
