CCS PCM C Compiler, Version 5.007, 61971               10-jun-25 11:26

               Filename:   C:\Users\rafae\OneDrive\Área de Trabalho\controle-remoto\main.lst

               ROM used:   1058 words (13%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           35 (10%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   340
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,22
000D:  DATA 73,38
000E:  DATA 65,39
000F:  DATA 61,37
0010:  DATA E4,37
0011:  DATA A0,29
0012:  DATA 69,37
0013:  DATA 61,36
0014:  DATA 00,00
0015:  DATA 8A,20
0016:  DATA F0,32
0017:  DATA 72,3A
0018:  DATA 65,10
0019:  DATA E2,37
001A:  DATA F4,30
001B:  DATA 6F,17
001C:  DATA 2E,17
001D:  DATA 00,01
001E:  DATA 20,06
001F:  DATA 20,26
0020:  DATA E1,36
0021:  DATA F0,30
0022:  DATA E4,30
0023:  DATA A0,18
0024:  DATA 00,01
0025:  DATA 20,05
0026:  DATA 20,26
0027:  DATA E1,36
0028:  DATA F0,30
0029:  DATA E4,30
002A:  DATA 20,19
002B:  DATA 00,01
002C:  DATA 20,06
002D:  DATA 20,26
002E:  DATA E1,36
002F:  DATA F0,30
0030:  DATA E4,30
0031:  DATA A0,18
0032:  DATA 00,01
0033:  DATA 20,06
0034:  DATA 20,26
0035:  DATA E1,36
0036:  DATA F0,30
0037:  DATA E4,30
0038:  DATA 20,19
0039:  DATA 00,01
003A:  DATA 8C,21
003B:  DATA 6F,32
003C:  DATA 3A,10
003D:  DATA 25,18
003E:  DATA 34,26
003F:  DATA 58,00
0040:  DATA 0A,10
0041:  DATA 20,10
0042:  DATA 20,10
0043:  DATA 25,18
0044:  DATA 34,26
0045:  DATA 58,00
*
0211:  MOVF   0B,W
0212:  MOVWF  2A
0213:  BCF    0B.7
0214:  BSF    03.5
0215:  BSF    03.6
0216:  BSF    0C.7
0217:  BSF    0C.0
0218:  NOP
0219:  NOP
021A:  BCF    03.5
021B:  MOVF   0C,W
021C:  ANDLW  7F
021D:  BTFSC  03.2
021E:  GOTO   258
021F:  BCF    03.6
0220:  MOVWF  2B
0221:  BSF    03.6
0222:  MOVF   0D,W
0223:  BCF    03.6
0224:  MOVWF  2C
0225:  BSF    03.6
0226:  MOVF   0F,W
0227:  BCF    03.6
0228:  MOVWF  2D
0229:  MOVF   2B,W
022A:  MOVWF  2F
022B:  CALL   1B7
022C:  MOVF   2C,W
022D:  BSF    03.6
022E:  MOVWF  0D
022F:  BCF    03.6
0230:  MOVF   2D,W
0231:  BSF    03.6
0232:  MOVWF  0F
0233:  BSF    03.5
0234:  BSF    0C.7
0235:  BSF    0C.0
0236:  NOP
0237:  NOP
0238:  BCF    03.5
0239:  RLF    0C,W
023A:  RLF    0E,W
023B:  ANDLW  7F
023C:  BTFSC  03.2
023D:  GOTO   258
023E:  BCF    03.6
023F:  MOVWF  2B
0240:  BSF    03.6
0241:  MOVF   0D,W
0242:  BCF    03.6
0243:  MOVWF  2C
0244:  BSF    03.6
0245:  MOVF   0F,W
0246:  BCF    03.6
0247:  MOVWF  2D
0248:  MOVF   2B,W
0249:  MOVWF  2F
024A:  CALL   1B7
024B:  MOVF   2C,W
024C:  BSF    03.6
024D:  MOVWF  0D
024E:  BCF    03.6
024F:  MOVF   2D,W
0250:  BSF    03.6
0251:  MOVWF  0F
0252:  INCF   0D,F
0253:  BTFSC  03.2
0254:  INCF   0F,F
0255:  BCF    03.6
0256:  GOTO   214
0257:  BSF    03.6
0258:  BCF    03.6
0259:  BTFSC  2A.7
025A:  BSF    0B.7
025B:  RETURN
*
02CB:  MOVF   0B,W
02CC:  MOVWF  2B
02CD:  BCF    0B.7
02CE:  BSF    03.5
02CF:  BSF    03.6
02D0:  BSF    0C.7
02D1:  BSF    0C.0
02D2:  NOP
02D3:  NOP
02D4:  BTFSC  03.0
02D5:  GOTO   2FD
02D6:  BCF    03.5
02D7:  MOVF   0C,W
02D8:  ANDLW  7F
02D9:  BCF    03.6
02DA:  MOVWF  2C
02DB:  BSF    03.6
02DC:  MOVF   0D,W
02DD:  BCF    03.6
02DE:  MOVWF  2D
02DF:  BSF    03.6
02E0:  MOVF   0F,W
02E1:  BCF    03.6
02E2:  MOVWF  2E
02E3:  MOVF   2C,W
02E4:  MOVWF  2F
02E5:  CALL   1B7
02E6:  MOVF   2D,W
02E7:  BSF    03.6
02E8:  MOVWF  0D
02E9:  BCF    03.6
02EA:  MOVF   2E,W
02EB:  BSF    03.6
02EC:  MOVWF  0F
02ED:  BSF    03.5
02EE:  BSF    0C.7
02EF:  BSF    0C.0
02F0:  NOP
02F1:  NOP
02F2:  BCF    03.5
02F3:  BCF    03.6
02F4:  DECFSZ 2A,F
02F5:  GOTO   2F7
02F6:  GOTO   2FA
02F7:  BSF    03.5
02F8:  BSF    03.6
02F9:  GOTO   2FD
02FA:  GOTO   31C
02FB:  BSF    03.5
02FC:  BSF    03.6
02FD:  BCF    03.5
02FE:  RLF    0C,W
02FF:  RLF    0E,W
0300:  ANDLW  7F
0301:  BCF    03.6
0302:  MOVWF  2C
0303:  BSF    03.6
0304:  MOVF   0D,W
0305:  BCF    03.6
0306:  MOVWF  2D
0307:  BSF    03.6
0308:  MOVF   0F,W
0309:  BCF    03.6
030A:  MOVWF  2E
030B:  MOVF   2C,W
030C:  MOVWF  2F
030D:  CALL   1B7
030E:  MOVF   2D,W
030F:  BSF    03.6
0310:  MOVWF  0D
0311:  BCF    03.6
0312:  MOVF   2E,W
0313:  BSF    03.6
0314:  MOVWF  0F
0315:  INCF   0D,F
0316:  BTFSC  03.2
0317:  INCF   0F,F
0318:  BCF    03.0
0319:  BCF    03.6
031A:  DECFSZ 2A,F
031B:  GOTO   2CE
031C:  BTFSC  2B.7
031D:  BSF    0B.7
031E:  RETURN
031F:  BTFSC  2B.7
0320:  GOTO   331
0321:  MOVLW  0F
0322:  MOVWF  77
0323:  SWAPF  2A,W
0324:  ANDWF  77,F
0325:  MOVLW  0A
0326:  SUBWF  77,W
0327:  BTFSC  03.0
0328:  GOTO   32C
0329:  MOVLW  30
032A:  ADDWF  77,F
032B:  GOTO   32E
032C:  MOVF   2B,W
032D:  ADDWF  77,F
032E:  MOVF   77,W
032F:  MOVWF  2F
0330:  CALL   1B7
0331:  MOVLW  0F
0332:  ANDWF  2A,F
0333:  MOVLW  0A
0334:  SUBWF  2A,W
0335:  BTFSC  03.0
0336:  GOTO   339
0337:  MOVLW  30
0338:  GOTO   33B
0339:  BCF    2B.7
033A:  MOVF   2B,W
033B:  ADDWF  2A,F
033C:  MOVF   2A,W
033D:  MOVWF  2F
033E:  CALL   1B7
033F:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
*
0046:  MOVLW  30
0047:  MOVWF  04
0048:  BCF    03.7
0049:  MOVF   00,W
004A:  BTFSC  03.2
004B:  GOTO   05A
004C:  MOVLW  01
004D:  MOVWF  78
004E:  CLRF   77
004F:  DECFSZ 77,F
0050:  GOTO   04F
0051:  DECFSZ 78,F
0052:  GOTO   04E
0053:  MOVLW  4A
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  GOTO   058
0058:  DECFSZ 00,F
0059:  GOTO   04C
005A:  RETURN
.................... #use i2c(Master, Fast=100000, sda=PIN_C4, scl=PIN_C3, force_sw)   
005B:  MOVLW  08
005C:  MOVWF  78
005D:  NOP
005E:  BCF    07.3
005F:  BCF    20.3
0060:  MOVF   20,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  NOP
0064:  BCF    03.5
0065:  RLF    3D,F
0066:  BCF    07.4
0067:  BTFSS  03.0
0068:  GOTO   06F
0069:  BSF    20.4
006A:  MOVF   20,W
006B:  BSF    03.5
006C:  MOVWF  07
006D:  GOTO   073
006E:  BCF    03.5
006F:  BCF    20.4
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  NOP
0074:  BCF    03.5
0075:  BSF    20.3
0076:  MOVF   20,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  BCF    03.5
007A:  BTFSS  07.3
007B:  GOTO   07A
007C:  DECFSZ 78,F
007D:  GOTO   05D
007E:  NOP
007F:  BCF    07.3
0080:  BCF    20.3
0081:  MOVF   20,W
0082:  BSF    03.5
0083:  MOVWF  07
0084:  NOP
0085:  BCF    03.5
0086:  BSF    20.4
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  NOP
008B:  NOP
008C:  BCF    03.5
008D:  BSF    20.3
008E:  MOVF   20,W
008F:  BSF    03.5
0090:  MOVWF  07
0091:  BCF    03.5
0092:  BTFSS  07.3
0093:  GOTO   092
0094:  CLRF   78
0095:  NOP
0096:  BTFSC  07.4
0097:  BSF    78.0
0098:  BCF    07.3
0099:  BCF    20.3
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  BCF    03.5
009E:  BCF    07.4
009F:  BCF    20.4
00A0:  MOVF   20,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  BCF    03.5
00A4:  RETURN
.................... #include "i2c_Flex_LCD.c" 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
01AD:  MOVF   2A,F
01AE:  BTFSC  03.2
01AF:  GOTO   1B3
01B0:  MOVLW  08
01B1:  MOVWF  25
01B2:  GOTO   1B4
01B3:  CLRF   25
01B4:  BCF    0A.3
01B5:  BCF    0A.4
01B6:  GOTO   35B (RETURN)
.................... }  
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
*
00A5:  MOVF   3B,W
00A6:  XORLW  00
00A7:  BTFSC  03.2
00A8:  GOTO   0AD
00A9:  XORLW  01
00AA:  BTFSC  03.2
00AB:  GOTO   0CD
00AC:  GOTO   0EE
....................    {       
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
00AD:  SWAPF  3A,W
00AE:  MOVWF  77
00AF:  MOVLW  F0
00B0:  ANDWF  77,F
00B1:  MOVF   77,W
00B2:  IORWF  25,W
00B3:  MOVWF  3C
00B4:  MOVWF  3D
00B5:  CALL   05B
....................       delay_cycles(1);  
00B6:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
00B7:  SWAPF  3A,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORLW  04
00BD:  IORWF  25,W
00BE:  MOVWF  3C
00BF:  MOVWF  3D
00C0:  CALL   05B
....................       delay_us(2);  
00C1:  GOTO   0C2
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
00C2:  SWAPF  3A,W
00C3:  MOVWF  77
00C4:  MOVLW  F0
00C5:  ANDWF  77,F
00C6:  MOVF   77,W
00C7:  ANDLW  FB
00C8:  IORWF  25,W
00C9:  MOVWF  3C
00CA:  MOVWF  3D
00CB:  CALL   05B
....................       break;  
00CC:  GOTO   0EE
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00CD:  SWAPF  3A,W
00CE:  MOVWF  77
00CF:  MOVLW  F0
00D0:  ANDWF  77,F
00D1:  MOVF   77,W
00D2:  IORLW  01
00D3:  IORWF  25,W
00D4:  MOVWF  3C
00D5:  MOVWF  3D
00D6:  CALL   05B
....................       delay_cycles(1);  
00D7:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00D8:  SWAPF  3A,W
00D9:  MOVWF  77
00DA:  MOVLW  F0
00DB:  ANDWF  77,F
00DC:  MOVF   77,W
00DD:  IORLW  01
00DE:  IORLW  04
00DF:  IORWF  25,W
00E0:  MOVWF  3C
00E1:  MOVWF  3D
00E2:  CALL   05B
....................       delay_us(2);  
00E3:  GOTO   0E4
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00E4:  SWAPF  3A,W
00E5:  MOVWF  77
00E6:  MOVLW  F0
00E7:  ANDWF  77,F
00E8:  MOVF   77,W
00E9:  IORLW  01
00EA:  IORWF  25,W
00EB:  MOVWF  3C
00EC:  MOVWF  3D
00ED:  CALL   05B
....................       break;  
....................    }  
00EE:  RETURN
.................... }  
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00EF:  BSF    20.4
00F0:  MOVF   20,W
00F1:  BSF    03.5
00F2:  MOVWF  07
00F3:  NOP
00F4:  BCF    03.5
00F5:  BSF    20.3
00F6:  MOVF   20,W
00F7:  BSF    03.5
00F8:  MOVWF  07
00F9:  NOP
00FA:  BCF    03.5
00FB:  BCF    07.4
00FC:  BCF    20.4
00FD:  MOVF   20,W
00FE:  BSF    03.5
00FF:  MOVWF  07
0100:  NOP
0101:  BCF    03.5
0102:  BCF    07.3
0103:  BCF    20.3
0104:  MOVF   20,W
0105:  BSF    03.5
0106:  MOVWF  07
....................         i2c_write(LCD_ADDR);  
0107:  BCF    03.5
0108:  MOVF   21,W
0109:  MOVWF  3D
010A:  CALL   05B
....................         i2c_send_nibble(data >> 4 , type);  
010B:  SWAPF  37,W
010C:  MOVWF  39
010D:  MOVLW  0F
010E:  ANDWF  39,F
010F:  MOVF   39,W
0110:  MOVWF  3A
0111:  MOVF   38,W
0112:  MOVWF  3B
0113:  CALL   0A5
....................         i2c_send_nibble(data & 0xf , type);  
0114:  MOVF   37,W
0115:  ANDLW  0F
0116:  MOVWF  39
0117:  MOVWF  3A
0118:  MOVF   38,W
0119:  MOVWF  3B
011A:  CALL   0A5
....................         i2c_stop();         
011B:  BCF    20.4
011C:  MOVF   20,W
011D:  BSF    03.5
011E:  MOVWF  07
011F:  NOP
0120:  BCF    03.5
0121:  BSF    20.3
0122:  MOVF   20,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  BCF    03.5
0126:  BTFSS  07.3
0127:  GOTO   126
0128:  NOP
0129:  GOTO   12A
012A:  NOP
012B:  BSF    20.4
012C:  MOVF   20,W
012D:  BSF    03.5
012E:  MOVWF  07
012F:  NOP
0130:  BCF    03.5
0131:  RETURN
....................    }  
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
0132:  MOVLW  01
0133:  MOVWF  37
0134:  CLRF   38
0135:  CALL   0EF
....................         delay_ms(2);  
0136:  MOVLW  02
0137:  MOVWF  30
0138:  CALL   046
....................         new_row_request=1;  
0139:  MOVLW  01
013A:  MOVWF  24
013B:  RETURN
.................... }  
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
013C:  MOVF   2A,W
013D:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
013E:  MOVF   2C,W
013F:  MOVWF  22
....................    lcd_total_columns= col ; 
0140:  MOVF   2B,W
0141:  MOVWF  23
....................    disable_interrupts(GLOBAL);  
0142:  BCF    0B.6
0143:  BCF    0B.7
0144:  BTFSC  0B.7
0145:  GOTO   143
....................    delay_ms(50); //LCD power up delay  
0146:  MOVLW  32
0147:  MOVWF  30
0148:  CALL   046
....................      
....................    i2c_start();  
0149:  BSF    20.4
014A:  MOVF   20,W
014B:  BSF    03.5
014C:  MOVWF  07
014D:  NOP
014E:  BCF    03.5
014F:  BSF    20.3
0150:  MOVF   20,W
0151:  BSF    03.5
0152:  MOVWF  07
0153:  NOP
0154:  BCF    03.5
0155:  BCF    07.4
0156:  BCF    20.4
0157:  MOVF   20,W
0158:  BSF    03.5
0159:  MOVWF  07
015A:  NOP
015B:  BCF    03.5
015C:  BCF    07.3
015D:  BCF    20.3
015E:  MOVF   20,W
015F:  BSF    03.5
0160:  MOVWF  07
....................    i2c_write(LCD_ADDR);  
0161:  BCF    03.5
0162:  MOVF   21,W
0163:  MOVWF  3D
0164:  CALL   05B
....................       i2c_send_nibble(0x00,0);  
0165:  CLRF   3A
0166:  CLRF   3B
0167:  CALL   0A5
....................       delay_ms(15);  
0168:  MOVLW  0F
0169:  MOVWF  30
016A:  CALL   046
....................      
....................    for (i=1;i<=3;++i)     
016B:  MOVLW  01
016C:  MOVWF  2D
016D:  MOVF   2D,W
016E:  SUBLW  03
016F:  BTFSS  03.0
0170:  GOTO   17A
....................    {  
....................       i2c_send_nibble(0x03,0);  
0171:  MOVLW  03
0172:  MOVWF  3A
0173:  CLRF   3B
0174:  CALL   0A5
....................       delay_ms(5);  
0175:  MOVLW  05
0176:  MOVWF  30
0177:  CALL   046
0178:  INCF   2D,F
0179:  GOTO   16D
....................    }     
....................       i2c_send_nibble(0x02,0);  
017A:  MOVLW  02
017B:  MOVWF  3A
017C:  CLRF   3B
017D:  CALL   0A5
....................       delay_ms(5);  
017E:  MOVLW  05
017F:  MOVWF  30
0180:  CALL   046
....................    i2c_stop();  
0181:  BCF    20.4
0182:  MOVF   20,W
0183:  BSF    03.5
0184:  MOVWF  07
0185:  NOP
0186:  BCF    03.5
0187:  BSF    20.3
0188:  MOVF   20,W
0189:  BSF    03.5
018A:  MOVWF  07
018B:  BCF    03.5
018C:  BTFSS  07.3
018D:  GOTO   18C
018E:  NOP
018F:  GOTO   190
0190:  NOP
0191:  BSF    20.4
0192:  MOVF   20,W
0193:  BSF    03.5
0194:  MOVWF  07
0195:  NOP
....................      
....................    for (i=0;i<=3;++i) {  
0196:  BCF    03.5
0197:  CLRF   2D
0198:  MOVF   2D,W
0199:  SUBLW  03
019A:  BTFSS  03.0
019B:  GOTO   1A7
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
019C:  MOVF   2D,W
019D:  CALL   004
019E:  MOVWF  2E
019F:  MOVWF  37
01A0:  CLRF   38
01A1:  CALL   0EF
....................    delay_ms(5);  
01A2:  MOVLW  05
01A3:  MOVWF  30
01A4:  CALL   046
01A5:  INCF   2D,F
01A6:  GOTO   198
....................    }  
....................    lcd_clear();  //Clear Display  
01A7:  CALL   132
....................    enable_interrupts(GLOBAL);  
01A8:  MOVLW  C0
01A9:  IORWF  0B,F
01AA:  BCF    0A.3
01AB:  BCF    0A.4
01AC:  GOTO   358 (RETURN)
.................... }  
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
....................   
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
01CF:  MOVF   31,W
01D0:  SUBWF  22,W
01D1:  BTFSC  03.0
01D2:  GOTO   1D6
01D3:  MOVF   22,W
01D4:  MOVWF  32
01D5:  GOTO   1D8
01D6:  MOVF   31,W
01D7:  MOVWF  32
....................    
....................    switch(row)  
01D8:  MOVF   32,W
01D9:  XORLW  01
01DA:  BTFSC  03.2
01DB:  GOTO   1E6
01DC:  XORLW  03
01DD:  BTFSC  03.2
01DE:  GOTO   1E8
01DF:  XORLW  01
01E0:  BTFSC  03.2
01E1:  GOTO   1EB
01E2:  XORLW  07
01E3:  BTFSC  03.2
01E4:  GOTO   1EE
01E5:  GOTO   1F1
....................    {  
....................       case 1:  row_addr=addr_row_one;     break;  
01E6:  CLRF   34
01E7:  GOTO   1F2
....................       case 2:  row_addr=addr_row_two;     break;  
01E8:  MOVLW  40
01E9:  MOVWF  34
01EA:  GOTO   1F2
....................       case 3:  row_addr=addr_row_three;   break;  
01EB:  MOVLW  14
01EC:  MOVWF  34
01ED:  GOTO   1F2
....................       case 4:  row_addr=addr_row_four;    break;  
01EE:  MOVLW  54
01EF:  MOVWF  34
01F0:  GOTO   1F2
....................       default: row_addr=addr_row_one;     break;   
01F1:  CLRF   34
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
01F2:  MOVF   30,W
01F3:  SUBWF  23,W
01F4:  BTFSC  03.0
01F5:  GOTO   1F9
01F6:  MOVF   23,W
01F7:  MOVWF  33
01F8:  GOTO   1FB
01F9:  MOVF   30,W
01FA:  MOVWF  33
....................    lcd_address=(row_addr+(column-1));  
01FB:  MOVLW  01
01FC:  SUBWF  33,W
01FD:  ADDWF  34,W
01FE:  MOVWF  35
....................    lcd_send_byte(0x80|lcd_address,0);  
01FF:  MOVF   35,W
0200:  IORLW  80
0201:  MOVWF  36
0202:  MOVWF  37
0203:  CLRF   38
0204:  CALL   0EF
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
*
01B7:  MOVF   2F,W
01B8:  XORLW  0C
01B9:  BTFSC  03.2
01BA:  GOTO   1C2
01BB:  XORLW  06
01BC:  BTFSC  03.2
01BD:  GOTO   1C4
01BE:  XORLW  02
01BF:  BTFSC  03.2
01C0:  GOTO   206
01C1:  GOTO   20B
....................    {   
....................      case '\f': lcd_clear();                       break;                 
01C2:  CALL   132
01C3:  GOTO   210
....................        
....................      case '\n':  
....................      new_row_request++;  
01C4:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
01C5:  MOVF   24,W
01C6:  SUBWF  22,W
01C7:  BTFSC  03.0
01C8:  GOTO   1CB
01C9:  MOVLW  01
01CA:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request);  
01CB:  MOVLW  01
01CC:  MOVWF  30
01CD:  MOVF   24,W
01CE:  MOVWF  31
....................      break;  
*
0205:  GOTO   210
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
0206:  MOVLW  10
0207:  MOVWF  37
0208:  CLRF   38
0209:  CALL   0EF
020A:  GOTO   210
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
020B:  MOVF   2F,W
020C:  MOVWF  37
020D:  MOVLW  01
020E:  MOVWF  38
020F:  CALL   0EF
....................        
....................    }  
0210:  RETURN
.................... }  
....................  
....................  
.................... // Definições dos pinos 
.................... #define IR_PIN      PIN_B0      // Pino do receptor IR 
.................... #define RELE1_PIN   PIN_D0      // Pino do relé 1 
.................... #define RELE2_PIN   PIN_D1      // Pino do relé 2 
....................  
.................... // Variáveis globais 
.................... unsigned int16 ir_code[2];      // Array para armazenar o código IR 
....................  
.................... void read_ir_code() { 
....................    int8 i; 
....................    unsigned int16 count; 
....................     
....................    // Limpa os códigos anteriores 
....................    ir_code[0] = 0; 
*
025C:  CLRF   27
025D:  CLRF   26
....................    ir_code[1] = 0; 
025E:  CLRF   29
025F:  CLRF   28
....................     
....................    // Aguarda o início do sinal (quando o pino vai para 0) 
....................    while(input(IR_PIN) == 1); 
0260:  BSF    03.5
0261:  BSF    06.0
0262:  BCF    03.5
0263:  BTFSC  06.0
0264:  GOTO   260
....................    delay_ms(4); // Aguarda meio do pulso inicial 
0265:  MOVLW  04
0266:  MOVWF  30
0267:  CALL   046
....................     
....................    // Lê os bits 
....................    for(i = 0; i < 32; i++) { 
0268:  CLRF   2A
0269:  MOVF   2A,W
026A:  SUBLW  1F
026B:  BTFSS  03.0
026C:  GOTO   2C8
....................       count = 0; 
026D:  CLRF   2C
026E:  CLRF   2B
....................       // Aguarda pulso subir 
....................       while(input(IR_PIN) == 0 && count < 100) { 
026F:  BSF    03.5
0270:  BSF    06.0
0271:  BCF    03.5
0272:  BTFSC  06.0
0273:  GOTO   285
0274:  MOVF   2C,F
0275:  BTFSS  03.2
0276:  GOTO   285
0277:  MOVF   2B,W
0278:  SUBLW  63
0279:  BTFSS  03.0
027A:  GOTO   285
....................          count++; 
027B:  INCF   2B,F
027C:  BTFSC  03.2
027D:  INCF   2C,F
....................          delay_us(100); 
027E:  MOVLW  20
027F:  MOVWF  77
0280:  DECFSZ 77,F
0281:  GOTO   280
0282:  GOTO   283
0283:  NOP
0284:  GOTO   26F
....................       } 
....................        
....................       count = 0; 
0285:  CLRF   2C
0286:  CLRF   2B
....................       delay_us(600); // Aguarda tempo de referência 
0287:  MOVLW  C7
0288:  MOVWF  77
0289:  DECFSZ 77,F
028A:  GOTO   289
028B:  GOTO   28C
....................        
....................       // Lê o bit 
....................       if(input(IR_PIN) == 0) { // Pulso longo = 1 
028C:  BSF    03.5
028D:  BSF    06.0
028E:  BCF    03.5
028F:  BTFSC  06.0
0290:  GOTO   2B0
....................          if(i < 16) { 
0291:  MOVF   2A,W
0292:  SUBLW  0F
0293:  BTFSS  03.0
0294:  GOTO   2A2
....................             ir_code[0] |= (1 << i); 
0295:  MOVLW  01
0296:  MOVWF  77
0297:  MOVF   2A,W
0298:  MOVWF  78
0299:  BTFSC  03.2
029A:  GOTO   29F
029B:  BCF    03.0
029C:  RLF    77,F
029D:  DECFSZ 78,F
029E:  GOTO   29B
029F:  MOVF   77,W
02A0:  IORWF  26,F
....................          } else { 
02A1:  GOTO   2B0
....................             ir_code[1] |= (1 << (i-16)); 
02A2:  MOVLW  10
02A3:  SUBWF  2A,W
02A4:  MOVWF  78
02A5:  MOVLW  01
02A6:  MOVWF  77
02A7:  MOVF   78,F
02A8:  BTFSC  03.2
02A9:  GOTO   2AE
02AA:  BCF    03.0
02AB:  RLF    77,F
02AC:  DECFSZ 78,F
02AD:  GOTO   2AA
02AE:  MOVF   77,W
02AF:  IORWF  28,F
....................          } 
....................       } 
....................        
....................       // Aguarda fim do bit 
....................       while(input(IR_PIN) == 1 && count < 100) { 
02B0:  BSF    03.5
02B1:  BSF    06.0
02B2:  BCF    03.5
02B3:  BTFSS  06.0
02B4:  GOTO   2C6
02B5:  MOVF   2C,F
02B6:  BTFSS  03.2
02B7:  GOTO   2C6
02B8:  MOVF   2B,W
02B9:  SUBLW  63
02BA:  BTFSS  03.0
02BB:  GOTO   2C6
....................          count++; 
02BC:  INCF   2B,F
02BD:  BTFSC  03.2
02BE:  INCF   2C,F
....................          delay_us(100); 
02BF:  MOVLW  20
02C0:  MOVWF  77
02C1:  DECFSZ 77,F
02C2:  GOTO   2C1
02C3:  GOTO   2C4
02C4:  NOP
02C5:  GOTO   2B0
....................       } 
02C6:  INCF   2A,F
02C7:  GOTO   269
....................    } 
02C8:  BCF    0A.3
02C9:  BCF    0A.4
02CA:  GOTO   377 (RETURN)
.................... } 
....................  
.................... void main() { 
*
0340:  MOVLW  FF
0341:  MOVWF  20
0342:  MOVLW  01
0343:  MOVWF  24
0344:  MOVLW  08
0345:  MOVWF  25
0346:  BSF    03.5
0347:  BSF    1F.0
0348:  BSF    1F.1
0349:  BSF    1F.2
034A:  BCF    1F.3
034B:  MOVLW  07
034C:  MOVWF  1C
034D:  BCF    03.7
034E:  MOVLW  1F
034F:  ANDWF  03,F
....................    // Inicialização do LCD 
....................    lcd_init(0x4E, 16, 2); 
0350:  MOVLW  4E
0351:  BCF    03.5
0352:  MOVWF  2A
0353:  MOVLW  10
0354:  MOVWF  2B
0355:  MOVLW  02
0356:  MOVWF  2C
0357:  GOTO   13C
....................    lcd_backlight_led(ON); 
0358:  MOVLW  01
0359:  MOVWF  2A
035A:  GOTO   1AD
....................     
....................    // Configuração dos pinos 
....................    set_tris_b(0b00000001);  // RB0 como entrada (IR) 
035B:  MOVLW  01
035C:  BSF    03.5
035D:  MOVWF  06
....................    set_tris_d(0b11111100);  // RD0 e RD1 como saída (Relés) 
035E:  MOVLW  FC
035F:  MOVWF  08
....................     
....................    // Inicialização das portas 
....................    output_d(0x00);          // Todos os pinos de PORTD em nível baixo 
0360:  CLRF   08
0361:  BCF    03.5
0362:  CLRF   08
....................     
....................    // Mensagem inicial 
....................    printf(lcd_putc, "\fEsperando Sinal"); 
0363:  MOVLW  0C
0364:  BSF    03.6
0365:  MOVWF  0D
0366:  MOVLW  00
0367:  MOVWF  0F
0368:  BCF    03.6
0369:  CALL   211
....................    printf(lcd_putc, "\nAperte botao..."); 
036A:  MOVLW  15
036B:  BSF    03.6
036C:  MOVWF  0D
036D:  MOVLW  00
036E:  MOVWF  0F
036F:  BCF    03.6
0370:  CALL   211
....................     
....................    while(TRUE) { 
....................       // Se detectar sinal IR (pino vai para 0) 
....................       if(input(IR_PIN) == 0) { 
0371:  BSF    03.5
0372:  BSF    06.0
0373:  BCF    03.5
0374:  BTFSC  06.0
0375:  GOTO   420
....................          // Lê o código 
....................          read_ir_code(); 
0376:  GOTO   25C
....................           
....................          // Mostra o código no LCD 
....................         
....................           
....................          if(ir_code[0] == 0x00F0 && ir_code[1] == 0x00FB) { 
0377:  MOVF   26,W
0378:  SUBLW  F0
0379:  BTFSS  03.2
037A:  GOTO   39E
037B:  MOVF   27,F
037C:  BTFSS  03.2
037D:  GOTO   39E
037E:  MOVF   28,W
037F:  SUBLW  FB
0380:  BTFSS  03.2
0381:  GOTO   39E
0382:  MOVF   29,F
0383:  BTFSS  03.2
0384:  GOTO   39E
....................             output_toggle(RELE1_PIN);  // Inverte estado do relé 1 
0385:  BSF    03.5
0386:  BCF    08.0
0387:  MOVLW  01
0388:  BCF    03.5
0389:  XORWF  08,F
....................            
....................             output_toggle(RELE2_PIN);  // Inverte estado do relé 2 
038A:  BSF    03.5
038B:  BCF    08.1
038C:  MOVLW  02
038D:  BCF    03.5
038E:  XORWF  08,F
....................             
....................             printf(lcd_putc, " \f Lampada 1"); 
038F:  MOVLW  1E
0390:  BSF    03.6
0391:  MOVWF  0D
0392:  MOVLW  00
0393:  MOVWF  0F
0394:  BCF    03.6
0395:  CALL   211
....................             printf(lcd_putc, " \n Lampada 2"); 
0396:  MOVLW  25
0397:  BSF    03.6
0398:  MOVWF  0D
0399:  MOVLW  00
039A:  MOVWF  0F
039B:  BCF    03.6
039C:  CALL   211
....................          } 
039D:  GOTO   418
....................           
....................           
....................          // Verifica qual botão foi pressionado 
....................          else if((ir_code[0] == 0x00FE && ir_code[1] == 0x0074)  
....................          || (ir_code[0] == 0x00F0 && ir_code[1] == 0x00F7)) { 
039E:  MOVF   26,W
039F:  SUBLW  FE
03A0:  BTFSS  03.2
03A1:  GOTO   3AC
03A2:  MOVF   27,F
03A3:  BTFSS  03.2
03A4:  GOTO   3AC
03A5:  MOVF   28,W
03A6:  SUBLW  74
03A7:  BTFSS  03.2
03A8:  GOTO   3AC
03A9:  MOVF   29,F
03AA:  BTFSC  03.2
03AB:  GOTO   3BA
03AC:  MOVF   26,W
03AD:  SUBLW  F0
03AE:  BTFSS  03.2
03AF:  GOTO   3C7
03B0:  MOVF   27,F
03B1:  BTFSS  03.2
03B2:  GOTO   3C7
03B3:  MOVF   28,W
03B4:  SUBLW  F7
03B5:  BTFSS  03.2
03B6:  GOTO   3C7
03B7:  MOVF   29,F
03B8:  BTFSS  03.2
03B9:  GOTO   3C7
....................             output_toggle(RELE1_PIN);  // Inverte estado do relé 1 
03BA:  BSF    03.5
03BB:  BCF    08.0
03BC:  MOVLW  01
03BD:  BCF    03.5
03BE:  XORWF  08,F
....................             printf(lcd_putc, " \f Lampada 1");   // Indica no LCD 
03BF:  MOVLW  2C
03C0:  BSF    03.6
03C1:  MOVWF  0D
03C2:  MOVLW  00
03C3:  MOVWF  0F
03C4:  BCF    03.6
03C5:  CALL   211
....................          } 
03C6:  GOTO   418
....................          else if((ir_code[0] == 0x00FE && ir_code[1] == 0x0072) ||  
....................                
....................          (ir_code[0] == 0x00F0 && ir_code[1] == 0x00F5)) {   
03C7:  MOVF   26,W
03C8:  SUBLW  FE
03C9:  BTFSS  03.2
03CA:  GOTO   3D5
03CB:  MOVF   27,F
03CC:  BTFSS  03.2
03CD:  GOTO   3D5
03CE:  MOVF   28,W
03CF:  SUBLW  72
03D0:  BTFSS  03.2
03D1:  GOTO   3D5
03D2:  MOVF   29,F
03D3:  BTFSC  03.2
03D4:  GOTO   3E3
03D5:  MOVF   26,W
03D6:  SUBLW  F0
03D7:  BTFSS  03.2
03D8:  GOTO   3F0
03D9:  MOVF   27,F
03DA:  BTFSS  03.2
03DB:  GOTO   3F0
03DC:  MOVF   28,W
03DD:  SUBLW  F5
03DE:  BTFSS  03.2
03DF:  GOTO   3F0
03E0:  MOVF   29,F
03E1:  BTFSS  03.2
03E2:  GOTO   3F0
....................             output_toggle(RELE2_PIN);  // Inverte estado do relé 2 
03E3:  BSF    03.5
03E4:  BCF    08.1
03E5:  MOVLW  02
03E6:  BCF    03.5
03E7:  XORWF  08,F
....................             printf(lcd_putc, " \f Lampada 2");   // Indica no LCD 
03E8:  MOVLW  33
03E9:  BSF    03.6
03EA:  MOVWF  0D
03EB:  MOVLW  00
03EC:  MOVWF  0F
03ED:  BCF    03.6
03EE:  CALL   211
....................          } 
03EF:  GOTO   418
....................          else{ 
....................             printf(lcd_putc, "\fCod: %04LX", ir_code[0]); 
03F0:  MOVLW  3A
03F1:  BSF    03.6
03F2:  MOVWF  0D
03F3:  MOVLW  00
03F4:  MOVWF  0F
03F5:  BCF    03.0
03F6:  MOVLW  06
03F7:  BCF    03.6
03F8:  MOVWF  2A
03F9:  CALL   2CB
03FA:  MOVF   27,W
03FB:  MOVWF  2A
03FC:  MOVLW  37
03FD:  MOVWF  2B
03FE:  CALL   31F
03FF:  MOVF   26,W
0400:  MOVWF  2A
0401:  MOVLW  37
0402:  MOVWF  2B
0403:  CALL   31F
....................             printf(lcd_putc, "\n     %04LX", ir_code[1]); 
0404:  MOVLW  40
0405:  BSF    03.6
0406:  MOVWF  0D
0407:  MOVLW  00
0408:  MOVWF  0F
0409:  BCF    03.0
040A:  MOVLW  06
040B:  BCF    03.6
040C:  MOVWF  2A
040D:  CALL   2CB
040E:  MOVF   29,W
040F:  MOVWF  2A
0410:  MOVLW  37
0411:  MOVWF  2B
0412:  CALL   31F
0413:  MOVF   28,W
0414:  MOVWF  2A
0415:  MOVLW  37
0416:  MOVWF  2B
0417:  CALL   31F
....................          } 
....................           
....................          // Espera soltar o botão e um tempo extra 
....................          while(input(IR_PIN) == 0); 
0418:  BSF    03.5
0419:  BSF    06.0
041A:  BCF    03.5
041B:  BTFSS  06.0
041C:  GOTO   418
....................          delay_ms(200); 
041D:  MOVLW  C8
041E:  MOVWF  30
041F:  CALL   046
....................       } 
0420:  GOTO   371
....................    } 
.................... } 
0421:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
